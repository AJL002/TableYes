{
  "service": {
    "service": "TableYes-Dev",
    "serviceObject": {
      "name": "TableYes-Dev"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "stage": "dev",
      "region": "us-east-1",
      "environment": {
        "DOMAIN_SUFFIX": "burgos-program",
        "RESTAURANTS_TABLE": "restaurants-table-dev",
        "USER_TABLE": "USER-TABLE-dev",
        "RESERVATION_TABLE": "reservation-table-dev",
        "user_pool_id": {
          "Ref": "UserPool"
        },
        "client_id": {
          "Ref": "UserClient"
        }
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:DeleteItem",
            "dynamodb:UpdateItem",
            "cognito-idp:*"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "RestaurantSubmissionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-restaurantSubmission"
            }
          },
          "ListRestaurantsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-listRestaurants"
            }
          },
          "GetRestaurantLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-getRestaurant"
            }
          },
          "GetRestReservationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-getRestReservations"
            }
          },
          "DeleteRestaurantLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-deleteRestaurant"
            }
          },
          "ReservationSubmissionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-reservationSubmission"
            }
          },
          "UpdateReservationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-updateReservation"
            }
          },
          "DeleteReservationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-deleteReservation"
            }
          },
          "SignupUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-signupUser"
            }
          },
          "LoginUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-loginUser"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-getUser"
            }
          },
          "GetUserDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-getUserDetails"
            }
          },
          "PrivateAPILogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/TableYes-Dev-dev-privateAPI"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "TableYes-Dev",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/TableYes-Dev-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/TableYes-Dev-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "TableYes-Dev",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "RestaurantSubmissionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/restaurant.submitRestaurant",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-restaurantSubmission",
              "MemorySize": 128,
              "Timeout": 6,
              "Description": "Submit restaurant information",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RestaurantSubmissionLogGroup"
            ]
          },
          "ListRestaurantsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/restaurant.listRestaurants",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-listRestaurants",
              "MemorySize": 128,
              "Timeout": 6,
              "Description": "List all restaurants",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListRestaurantsLogGroup"
            ]
          },
          "GetRestaurantLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/restaurant.getRest",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-getRestaurant",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "List specific restaurant detail",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetRestaurantLogGroup"
            ]
          },
          "GetRestReservationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/restaurant.getRestReserv",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-getRestReservations",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "List specific restaurant's reservations",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetRestReservationsLogGroup"
            ]
          },
          "DeleteRestaurantLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/restaurant.delete",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-deleteRestaurant",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "delete specific restaurant",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteRestaurantLogGroup"
            ]
          },
          "ReservationSubmissionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/reservations.submitReservation",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-reservationSubmission",
              "MemorySize": 128,
              "Timeout": 6,
              "Description": "Submit reservation info",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReservationSubmissionLogGroup"
            ]
          },
          "UpdateReservationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/reservations.updateReservation",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-updateReservation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "edit reservation information across all tables",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateReservationLogGroup"
            ]
          },
          "DeleteReservationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/reservations.deleteReservation",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-deleteReservation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "delete reservation information across all tables",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteReservationLogGroup"
            ]
          },
          "SignupUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/signup.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-signupUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "signup user and submit to database",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignupUserLogGroup"
            ]
          },
          "LoginUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/login.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-loginUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "login user",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginUserLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/user.getUserPar",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "get user",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "GetUserDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/user.getUserDetails",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-getUserDetails",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "get user reservations or restaurants detail",
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserDetailsLogGroup"
            ]
          },
          "PrivateAPILambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z/TableYes-Dev.zip"
              },
              "Handler": "api/private.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "TableYes-Dev-dev-privateAPI",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DOMAIN_SUFFIX": "burgos-program",
                  "RESTAURANTS_TABLE": "restaurants-table-dev",
                  "USER_TABLE": "USER-TABLE-dev",
                  "RESERVATION_TABLE": "reservation-table-dev",
                  "user_pool_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"user_pool_id\"]"
                  },
                  "client_id": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"client_id\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PrivateAPILogGroup"
            ]
          },
          "RestaurantSubmissionLambdaVersioneuo0arCLj0bNZhCvsNXbnob96Fhn9NsIGgO36toC6qY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RestaurantSubmissionLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "Submit restaurant information"
            }
          },
          "ListRestaurantsLambdaVersionSpV6x8Xh48iSl6f1cnpdtxHq0w0xlorutmoSUexXds": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListRestaurantsLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "List all restaurants"
            }
          },
          "GetRestaurantLambdaVersionaffARl8AU0WFSmwZW64Z8QTSiaJxdxs6ZBePYjuTJA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetRestaurantLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "List specific restaurant detail"
            }
          },
          "GetRestReservationsLambdaVersionJGnKl0TPDOUbSD57GyhZKH5uqO5wsKudfqYAC0zw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetRestReservationsLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "List specific restaurant's reservations"
            }
          },
          "DeleteRestaurantLambdaVersionnRODF2FK1LStqSF5D2dCNmL2jloKXrLQ5ptji9tJRU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteRestaurantLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "delete specific restaurant"
            }
          },
          "ReservationSubmissionLambdaVersion1NlaXZseTteyDNZ3Iwfkj1MenCxxqNoJZeWY38XLD7g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReservationSubmissionLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "Submit reservation info"
            }
          },
          "UpdateReservationLambdaVersionNxRghrJzBxtPVPDMamRyyOkDa9MnTeLwbGstLNp7us": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateReservationLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "edit reservation information across all tables"
            }
          },
          "DeleteReservationLambdaVersionyF4ayCZp6qhrFV6hROLCjE0zjfE5SSTgzniQaamA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteReservationLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "delete reservation information across all tables"
            }
          },
          "SignupUserLambdaVersionyzhuN3qO0kvfbx6QrjUIGAqSxIuB0NSBpWIXDNNCdI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignupUserLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "signup user and submit to database"
            }
          },
          "LoginUserLambdaVersion8MynuaigFX2tMbndBp847ihMD8O89CIRNSwaLby0wE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginUserLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "login user"
            }
          },
          "GetUserLambdaVersionfyOqiB0hkx09mp2EztFT7zlLfi2IpXxJoEgUUH2Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "get user"
            }
          },
          "GetUserDetailsLambdaVersionlWlFIzMRI8wf0PzKFCexlIGnmimx45mUt9dnKjkIk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserDetailsLambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k=",
              "Description": "get user reservations or restaurants detail"
            }
          },
          "PrivateAPILambdaVersiondOgyoRaQRvjxkVZdcUjMbZXoFNQ1s5pAWSsytOZ4PgY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PrivateAPILambdaFunction"
              },
              "CodeSha256": "FaxNCjDUBb0ii5TQbFaBUbkKcZ9fhGPdC70zn14zF7k="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-TableYes-Dev",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceRestaurants": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "restaurants",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRestaurantsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceRestaurants"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRestaurant": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "restaurant",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRestaurantIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceRestaurant"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceReservations": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "reservations",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApi": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiSignup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "signup",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiPrivate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "private",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRestaurantsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRestaurants"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRestaurantsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRestaurantsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRestaurantIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRestaurantIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodReservationsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceReservations"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiSignupOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiSignup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiUsersIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiUserOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiPrivateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiPrivate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRestaurantsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRestaurants"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "PrivateAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RestaurantSubmissionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "PrivateAuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodRestaurantsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRestaurants"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListRestaurantsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListRestaurantsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRestaurantsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRestaurantsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "PrivateAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRestaurantLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "PrivateAuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodRestaurantIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRestaurantIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "PrivateAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRestReservationsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "PrivateAuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodRestaurantsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRestaurantsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "PrivateAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteRestaurantLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "PrivateAuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodReservationsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceReservations"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "PrivateAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ReservationSubmissionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "PrivateAuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodReservationsPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceReservations"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "PrivateAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateReservationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "PrivateAuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodReservationsDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceReservations"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "PrivateAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteReservationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "PrivateAuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodApiSignupPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiSignup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignupUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SignupUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiUsersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "PrivateAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "PrivateAuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodApiUserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "PrivateAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserDetailsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "PrivateAuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodApiPrivatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiPrivate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "PrivateAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PrivateAPILambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "PrivateAuthorizerApiGatewayAuthorizer"
          },
          "PrivateAuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "PrivateAuthorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                {
                  "Fn::GetAtt": [
                    "UserPool",
                    "Arn"
                  ]
                }
              ]
            }
          },
          "ApiGatewayDeployment1669838395534": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodRestaurantsOptions",
              "ApiGatewayMethodRestaurantsIdVarOptions",
              "ApiGatewayMethodRestaurantIdVarOptions",
              "ApiGatewayMethodReservationsOptions",
              "ApiGatewayMethodApiSignupOptions",
              "ApiGatewayMethodApiLoginOptions",
              "ApiGatewayMethodApiUsersIdVarOptions",
              "ApiGatewayMethodApiUserOptions",
              "ApiGatewayMethodApiPrivateOptions",
              "ApiGatewayMethodRestaurantsPost",
              "ApiGatewayMethodRestaurantsGet",
              "ApiGatewayMethodRestaurantsIdVarGet",
              "ApiGatewayMethodRestaurantIdVarGet",
              "ApiGatewayMethodRestaurantsIdVarDelete",
              "ApiGatewayMethodReservationsPost",
              "ApiGatewayMethodReservationsPut",
              "ApiGatewayMethodReservationsDelete",
              "ApiGatewayMethodApiSignupPost",
              "ApiGatewayMethodApiLoginPost",
              "ApiGatewayMethodApiUsersIdVarGet",
              "ApiGatewayMethodApiUserGet",
              "ApiGatewayMethodApiPrivatePost"
            ]
          },
          "RestaurantSubmissionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RestaurantSubmissionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListRestaurantsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListRestaurantsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetRestaurantLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetRestaurantLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetRestReservationsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetRestReservationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteRestaurantLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteRestaurantLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ReservationSubmissionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReservationSubmissionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateReservationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateReservationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteReservationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteReservationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignupUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignupUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserDetailsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserDetailsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PrivateAPILambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PrivateAPILambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RestaurantsDynamoDbTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              },
              "TableName": "restaurants-table-dev"
            }
          },
          "UsersDynamoDbTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              },
              "TableName": "USER-TABLE-dev"
            }
          },
          "ReservationDynamoDbTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              },
              "TableName": "reservation-table-dev"
            }
          },
          "GatewayResponseDefault4XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "method.request.header.Origin",
                "gatewayresponse.header.Access-Control-Allow-Credentials": "'true'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_4XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "GatewayResponseDefault5XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "method.request.header.Origin",
                "gatewayresponse.header.Access-Control-Allow-Credentials": "'true'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_5XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "cognito_sls_backend_user_pool"
            }
          },
          "CognitoUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "cognito_sls_backend_client",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              }
            }
          },
          "CognitoIdentityPool": {
            "Type": "AWS::Cognito::IdentityPool",
            "Properties": {
              "IdentityPoolName": "cognito_sls_backend_identity_pool",
              "AllowUnauthenticatedIdentities": false,
              "CognitoIdentityProviders": [
                {
                  "ClientId": {
                    "Ref": "CognitoUserPoolClient"
                  },
                  "ProviderName": {
                    "Fn::GetAtt": [
                      "CognitoUserPool",
                      "ProviderName"
                    ]
                  }
                }
              ]
            }
          },
          "UserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "serverless-auth-pool",
              "Schema": [
                {
                  "Name": "email",
                  "Required": true,
                  "Mutable": true
                }
              ],
              "Policies": {
                "PasswordPolicy": {
                  "MinimumLength": 6
                }
              },
              "AutoVerifiedAttributes": [
                "email"
              ]
            }
          },
          "UserClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "user-pool-ui",
              "GenerateSecret": false,
              "UserPoolId": {
                "Ref": "UserPool"
              },
              "AccessTokenValidity": 5,
              "IdTokenValidity": 5,
              "ExplicitAuthFlows": [
                "ADMIN_NO_SRP_AUTH"
              ]
            }
          },
          "CognitoIdentityPoolRoles": {
            "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
            "Properties": {
              "IdentityPoolId": {
                "Ref": "CognitoIdentityPool"
              },
              "Roles": {
                "authenticated": {
                  "Fn::GetAtt": [
                    "CognitoAuthRole",
                    "Arn"
                  ]
                },
                "unauthenticated": {
                  "Fn::GetAtt": [
                    "CognitoUnauthRole",
                    "Arn"
                  ]
                }
              }
            }
          },
          "CognitoAuthRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "appAuthRole",
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "cognito-identity.amazonaws.com"
                    },
                    "Action": [
                      "sts:AssumeRoleWithWebIdentity"
                    ],
                    "Condition": {
                      "StringEquals": {
                        "cognito-identity.amazonaws.com:aud": {
                          "Ref": "CognitoIdentityPool"
                        }
                      },
                      "ForAnyValue:StringLike": {
                        "cognito-identity.amazonaws.com:amr": "authenticated"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CognitoAuthorizedPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "mobileanalytics:PutEvents",
                          "cognito-sync:*",
                          "cognito-identity:*"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:Invoke"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CognitoUnauthRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "appUnauthRole",
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "cognito-identity.amazonaws.com"
                    },
                    "Action": [
                      "sts:AssumeRoleWithWebIdentity"
                    ],
                    "Condition": {
                      "StringEquals": {
                        "cognito-identity.amazonaws.com:aud": {
                          "Ref": "CognitoIdentityPool"
                        }
                      },
                      "ForAnyValue:StringLike": {
                        "cognito-identity.amazonaws.com:amr": "unauthenticated"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CognitoUnauthorizedPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "mobileanalytics:PutEvents",
                          "cognito-sync:*",
                          "cognito-identity:*"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-ServerlessDeploymentBucketName"
            }
          },
          "RestaurantSubmissionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RestaurantSubmissionLambdaVersioneuo0arCLj0bNZhCvsNXbnob96Fhn9NsIGgO36toC6qY"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-RestaurantSubmissionLambdaFunctionQualifiedArn"
            }
          },
          "ListRestaurantsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListRestaurantsLambdaVersionSpV6x8Xh48iSl6f1cnpdtxHq0w0xlorutmoSUexXds"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-ListRestaurantsLambdaFunctionQualifiedArn"
            }
          },
          "GetRestaurantLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetRestaurantLambdaVersionaffARl8AU0WFSmwZW64Z8QTSiaJxdxs6ZBePYjuTJA"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-GetRestaurantLambdaFunctionQualifiedArn"
            }
          },
          "GetRestReservationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetRestReservationsLambdaVersionJGnKl0TPDOUbSD57GyhZKH5uqO5wsKudfqYAC0zw"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-GetRestReservationsLambdaFunctionQualifiedArn"
            }
          },
          "DeleteRestaurantLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteRestaurantLambdaVersionnRODF2FK1LStqSF5D2dCNmL2jloKXrLQ5ptji9tJRU"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-DeleteRestaurantLambdaFunctionQualifiedArn"
            }
          },
          "ReservationSubmissionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReservationSubmissionLambdaVersion1NlaXZseTteyDNZ3Iwfkj1MenCxxqNoJZeWY38XLD7g"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-ReservationSubmissionLambdaFunctionQualifiedArn"
            }
          },
          "UpdateReservationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateReservationLambdaVersionNxRghrJzBxtPVPDMamRyyOkDa9MnTeLwbGstLNp7us"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-UpdateReservationLambdaFunctionQualifiedArn"
            }
          },
          "DeleteReservationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteReservationLambdaVersionyF4ayCZp6qhrFV6hROLCjE0zjfE5SSTgzniQaamA"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-DeleteReservationLambdaFunctionQualifiedArn"
            }
          },
          "SignupUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignupUserLambdaVersionyzhuN3qO0kvfbx6QrjUIGAqSxIuB0NSBpWIXDNNCdI"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-SignupUserLambdaFunctionQualifiedArn"
            }
          },
          "LoginUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginUserLambdaVersion8MynuaigFX2tMbndBp847ihMD8O89CIRNSwaLby0wE"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-LoginUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionfyOqiB0hkx09mp2EztFT7zlLfi2IpXxJoEgUUH2Q"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserDetailsLambdaVersionlWlFIzMRI8wf0PzKFCexlIGnmimx45mUt9dnKjkIk"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-GetUserDetailsLambdaFunctionQualifiedArn"
            }
          },
          "PrivateAPILambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PrivateAPILambdaVersiondOgyoRaQRvjxkVZdcUjMbZXoFNQ1s5pAWSsytOZ4PgY"
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-PrivateAPILambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-TableYes-Dev-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "restaurantSubmission": {
        "handler": "api/restaurant.submitRestaurant",
        "memorySize": 128,
        "description": "Submit restaurant information",
        "events": [
          {
            "http": {
              "path": "restaurants",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "PrivateAuthorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "UserPool",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email",
                  "sub"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-restaurantSubmission",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "RestaurantSubmissionLambdaVersioneuo0arCLj0bNZhCvsNXbnob96Fhn9NsIGgO36toC6qY"
      },
      "listRestaurants": {
        "handler": "api/restaurant.listRestaurants",
        "memorySize": 128,
        "description": "List all restaurants",
        "events": [
          {
            "http": {
              "path": "restaurants",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-listRestaurants",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ListRestaurantsLambdaVersionSpV6x8Xh48iSl6f1cnpdtxHq0w0xlorutmoSUexXds"
      },
      "getRestaurant": {
        "handler": "api/restaurant.getRest",
        "description": "List specific restaurant detail",
        "events": [
          {
            "http": {
              "path": "restaurants/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "PrivateAuthorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "UserPool",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email",
                  "sub"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-getRestaurant",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetRestaurantLambdaVersionaffARl8AU0WFSmwZW64Z8QTSiaJxdxs6ZBePYjuTJA"
      },
      "getRestReservations": {
        "handler": "api/restaurant.getRestReserv",
        "description": "List specific restaurant's reservations",
        "events": [
          {
            "http": {
              "path": "restaurant/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "PrivateAuthorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "UserPool",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email",
                  "sub"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-getRestReservations",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetRestReservationsLambdaVersionJGnKl0TPDOUbSD57GyhZKH5uqO5wsKudfqYAC0zw"
      },
      "deleteRestaurant": {
        "handler": "api/restaurant.delete",
        "description": "delete specific restaurant",
        "events": [
          {
            "http": {
              "path": "restaurants/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "PrivateAuthorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "UserPool",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email",
                  "sub"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-deleteRestaurant",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteRestaurantLambdaVersionnRODF2FK1LStqSF5D2dCNmL2jloKXrLQ5ptji9tJRU"
      },
      "reservationSubmission": {
        "handler": "api/reservations.submitReservation",
        "memorySize": 128,
        "description": "Submit reservation info",
        "events": [
          {
            "http": {
              "path": "reservations",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "PrivateAuthorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "UserPool",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email",
                  "sub"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-reservationSubmission",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ReservationSubmissionLambdaVersion1NlaXZseTteyDNZ3Iwfkj1MenCxxqNoJZeWY38XLD7g"
      },
      "updateReservation": {
        "handler": "api/reservations.updateReservation",
        "description": "edit reservation information across all tables",
        "events": [
          {
            "http": {
              "path": "reservations",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "PrivateAuthorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "UserPool",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email",
                  "sub"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-updateReservation",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateReservationLambdaVersionNxRghrJzBxtPVPDMamRyyOkDa9MnTeLwbGstLNp7us"
      },
      "deleteReservation": {
        "handler": "api/reservations.deleteReservation",
        "description": "delete reservation information across all tables",
        "events": [
          {
            "http": {
              "path": "reservations",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "PrivateAuthorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "UserPool",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email",
                  "sub"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-deleteReservation",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteReservationLambdaVersionyF4ayCZp6qhrFV6hROLCjE0zjfE5SSTgzniQaamA"
      },
      "signupUser": {
        "handler": "api/signup.handler",
        "description": "signup user and submit to database",
        "events": [
          {
            "http": {
              "path": "api/signup",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-signupUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "SignupUserLambdaVersionyzhuN3qO0kvfbx6QrjUIGAqSxIuB0NSBpWIXDNNCdI"
      },
      "loginUser": {
        "handler": "api/login.handler",
        "description": "login user",
        "events": [
          {
            "http": {
              "path": "api/login",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-loginUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "LoginUserLambdaVersion8MynuaigFX2tMbndBp847ihMD8O89CIRNSwaLby0wE"
      },
      "getUser": {
        "handler": "api/user.getUserPar",
        "description": "get user",
        "events": [
          {
            "http": {
              "path": "api/users/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "PrivateAuthorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "UserPool",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email",
                  "sub"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-getUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionfyOqiB0hkx09mp2EztFT7zlLfi2IpXxJoEgUUH2Q"
      },
      "getUserDetails": {
        "handler": "api/user.getUserDetails",
        "description": "get user reservations or restaurants detail",
        "events": [
          {
            "http": {
              "path": "api/user",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "PrivateAuthorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "UserPool",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email",
                  "sub"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-getUserDetails",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUserDetailsLambdaVersionlWlFIzMRI8wf0PzKFCexlIGnmimx45mUt9dnKjkIk"
      },
      "privateAPI": {
        "handler": "api/private.handler",
        "events": [
          {
            "http": {
              "path": "api/private",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "PrivateAuthorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "UserPool",
                    "Arn"
                  ]
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": [
                  "email"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "TableYes-Dev-dev-privateAPI",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "PrivateAPILambdaVersiondOgyoRaQRvjxkVZdcUjMbZXoFNQ1s5pAWSsytOZ4PgY"
      }
    },
    "resources": {
      "Resources": {
        "RestaurantsDynamoDbTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "StreamSpecification": {
              "StreamViewType": "NEW_AND_OLD_IMAGES"
            },
            "TableName": "restaurants-table-dev"
          }
        },
        "UsersDynamoDbTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "StreamSpecification": {
              "StreamViewType": "NEW_AND_OLD_IMAGES"
            },
            "TableName": "USER-TABLE-dev"
          }
        },
        "ReservationDynamoDbTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "StreamSpecification": {
              "StreamViewType": "NEW_AND_OLD_IMAGES"
            },
            "TableName": "reservation-table-dev"
          }
        },
        "GatewayResponseDefault4XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "method.request.header.Origin",
              "gatewayresponse.header.Access-Control-Allow-Credentials": "'true'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "DEFAULT_4XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "GatewayResponseDefault5XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "method.request.header.Origin",
              "gatewayresponse.header.Access-Control-Allow-Credentials": "'true'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "DEFAULT_5XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "cognito_sls_backend_user_pool"
          }
        },
        "CognitoUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "cognito_sls_backend_client",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            }
          }
        },
        "CognitoIdentityPool": {
          "Type": "AWS::Cognito::IdentityPool",
          "Properties": {
            "IdentityPoolName": "cognito_sls_backend_identity_pool",
            "AllowUnauthenticatedIdentities": false,
            "CognitoIdentityProviders": [
              {
                "ClientId": {
                  "Ref": "CognitoUserPoolClient"
                },
                "ProviderName": {
                  "Fn::GetAtt": [
                    "CognitoUserPool",
                    "ProviderName"
                  ]
                }
              }
            ]
          }
        },
        "UserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "serverless-auth-pool",
            "Schema": [
              {
                "Name": "email",
                "Required": true,
                "Mutable": true
              }
            ],
            "Policies": {
              "PasswordPolicy": {
                "MinimumLength": 6
              }
            },
            "AutoVerifiedAttributes": [
              "email"
            ]
          }
        },
        "UserClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "user-pool-ui",
            "GenerateSecret": false,
            "UserPoolId": {
              "Ref": "UserPool"
            },
            "AccessTokenValidity": 5,
            "IdTokenValidity": 5,
            "ExplicitAuthFlows": [
              "ADMIN_NO_SRP_AUTH"
            ]
          }
        },
        "CognitoIdentityPoolRoles": {
          "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
          "Properties": {
            "IdentityPoolId": {
              "Ref": "CognitoIdentityPool"
            },
            "Roles": {
              "authenticated": {
                "Fn::GetAtt": [
                  "CognitoAuthRole",
                  "Arn"
                ]
              },
              "unauthenticated": {
                "Fn::GetAtt": [
                  "CognitoUnauthRole",
                  "Arn"
                ]
              }
            }
          }
        },
        "CognitoAuthRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "appAuthRole",
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "cognito-identity.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRoleWithWebIdentity"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "cognito-identity.amazonaws.com:aud": {
                        "Ref": "CognitoIdentityPool"
                      }
                    },
                    "ForAnyValue:StringLike": {
                      "cognito-identity.amazonaws.com:amr": "authenticated"
                    }
                  }
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "CognitoAuthorizedPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "mobileanalytics:PutEvents",
                        "cognito-sync:*",
                        "cognito-identity:*"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "execute-api:Invoke"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        },
        "CognitoUnauthRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "appUnauthRole",
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "cognito-identity.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRoleWithWebIdentity"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "cognito-identity.amazonaws.com:aud": {
                        "Ref": "CognitoIdentityPool"
                      }
                    },
                    "ForAnyValue:StringLike": {
                      "cognito-identity.amazonaws.com:amr": "unauthenticated"
                    }
                  }
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "CognitoUnauthorizedPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "mobileanalytics:PutEvents",
                        "cognito-sync:*",
                        "cognito-identity:*"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "TableYes-Dev",
      "frameworkVersion": ">=1.1.0 <3.23.0",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\Ian\\Desktop\\TableYesGit\\BackEnd\\.serverless\\TableYes-Dev.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/TableYes-Dev/dev/1669838409358-2022-11-30T20:00:09.358Z",
    "artifact": "TableYes-Dev.zip"
  }
}